{
  "address": "0xe713d73850261d22713F995C1cf021274A224b82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DappToken",
          "name": "_dappToken",
          "type": "address"
        },
        {
          "internalType": "contract LPToken",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REWARD_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappToken",
      "outputs": [
        {
          "internalType": "contract DappToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewardsAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract LPToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x555765e6ae881965ca8725571c137ded1ddd381ddad697e42455760cc92a9225",
  "receipt": {
    "to": null,
    "from": "0x52Efd673FF1f5B4dD19C024F75AF2040e9712f42",
    "contractAddress": "0xe713d73850261d22713F995C1cf021274A224b82",
    "transactionIndex": 135,
    "gasUsed": "797084",
    "logsBloom": "0x
    "blockHash": "0x9d89322d36ec59b7a7d0721f270eac484075495c597f60e401f94365f9724abf",
    "transactionHash": "0x555765e6ae881965ca8725571c137ded1ddd381ddad697e42455760cc92a9225",
    "logs": [],
    "blockNumber": 8915109,
    "cumulativeGasUsed": "16941979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x837e06427596d85765179F014DefE20f4F2A7f9D",
    "0xCb0016DB25F4e6B4B68A3bDD5C1531B0c5162419"
  ],
  "numDeployments": 1,
  "solcInputHash": "77d61cc2935397c3bb9dd55e75ba9e57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DappToken\",\"name\":\"_dappToken\",\"type\":\"address\"},{\"internalType\":\"contract LPToken\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract DappToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewardsAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract LPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"params\":{\"_amount\":\"Cantidad de tokens LP a depositar.\"}}},\"title\":\"Proportional Token Farm\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Reclama recompensas pendientes.\"},\"deposit(uint256)\":{\"notice\":\"Deposita tokens LP para staking.\"},\"distributeRewardsAll()\":{\"notice\":\"Distribuye recompensas a todos los usuarios en staking.\"},\"withdraw()\":{\"notice\":\"Retira todos los tokens LP en staking.\"}},\"notice\":\"Una granja de staking donde las recompensas se distribuyen proporcionalmente al total stakeado.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFarm.sol\":\"TokenFarm\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/DappToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DappToken is ERC20, Ownable {\\n    constructor(\\n        address initialOwner\\n    ) ERC20(\\\"Dapp Token\\\", \\\"DAPP\\\") Ownable(initialOwner) {}\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\",\"keccak256\":\"0xbcadd0444c18ea3ac2ad906d881fa77a498970a252e02def32336fdadece2455\",\"license\":\"MIT\"},\"contracts/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LPToken is ERC20, Ownable {\\n    constructor(\\n        address initialOwner\\n    ) ERC20(\\\"LP Token\\\", \\\"LPT\\\") Ownable(initialOwner) {}\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\",\"keccak256\":\"0x43422b24b7ffff84914ac4e8fdaf765e1d195e5b8744f2ae802deee85f6b4bc7\",\"license\":\"MIT\"},\"contracts/TokenFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./DappToken.sol\\\";\\nimport \\\"./LPToken.sol\\\";\\n\\n/**\\n * @title Proportional Token Farm\\n * @notice Una granja de staking donde las recompensas se distribuyen proporcionalmente al total stakeado.\\n */\\ncontract TokenFarm {\\n    //\\n    // Variables de estado\\n    //\\n    string public name = \\\"Proportional Token Farm\\\";\\n    address public owner;\\n    DappToken public dappToken;\\n    LPToken public lpToken;\\n\\n    uint256 public constant REWARD_PER_BLOCK = 1e18; // Recompensa por bloque\\n    uint256 public totalStakingBalance;\\n\\n    address[] public stakers;\\n    mapping(address => uint256) public stakingBalance;\\n    mapping(address => uint256) public checkpoints;\\n    mapping(address => uint256) public pendingRewards;\\n    mapping(address => bool) public hasStaked;\\n    mapping(address => bool) public isStaking;\\n\\n    //\\n    // Eventos\\n    //\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event RewardsClaimed(address indexed user, uint256 amount);\\n    event RewardsDistributed();\\n\\n    //\\n    // Constructor\\n    //\\n    constructor(DappToken _dappToken, LPToken _lpToken) {\\n        dappToken = _dappToken;\\n        lpToken = _lpToken;\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Deposita tokens LP para staking.\\n     * @param _amount Cantidad de tokens LP a depositar.\\n     */\\n    function deposit(uint256 _amount) external {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        // Transferir LP tokens al contrato\\n        lpToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        // Calcular y distribuir recompensas antes de actualizar balance\\n        distributeRewards(msg.sender);\\n\\n        // Actualizar balances\\n        stakingBalance[msg.sender] += _amount;\\n        totalStakingBalance += _amount;\\n\\n        if (!hasStaked[msg.sender]) {\\n            stakers.push(msg.sender);\\n            hasStaked[msg.sender] = true;\\n        }\\n\\n        isStaking[msg.sender] = true;\\n\\n        if (checkpoints[msg.sender] == 0) {\\n            checkpoints[msg.sender] = block.number;\\n        }\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Retira todos los tokens LP en staking.\\n     */\\n    function withdraw() external {\\n        require(isStaking[msg.sender], \\\"User is not staking\\\");\\n\\n        uint256 balance = stakingBalance[msg.sender];\\n        require(balance > 0, \\\"Staking balance is 0\\\");\\n\\n        // Calcular y distribuir recompensas antes de retirar\\n        distributeRewards(msg.sender);\\n\\n        // Actualizar balances\\n        stakingBalance[msg.sender] = 0;\\n        totalStakingBalance -= balance;\\n        isStaking[msg.sender] = false;\\n\\n        // Transferir tokens de vuelta\\n        lpToken.transfer(msg.sender, balance);\\n\\n        emit Withdraw(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Reclama recompensas pendientes.\\n     */\\n    function claimRewards() external {\\n        uint256 pendingAmount = pendingRewards[msg.sender];\\n        require(pendingAmount > 0, \\\"No pending rewards\\\");\\n\\n        pendingRewards[msg.sender] = 0;\\n\\n        dappToken.mint(msg.sender, pendingAmount);\\n\\n        emit RewardsClaimed(msg.sender, pendingAmount);\\n    }\\n\\n    /**\\n     * @notice Distribuye recompensas a todos los usuarios en staking.\\n     */\\n    function distributeRewardsAll() external {\\n        require(msg.sender == owner, \\\"Only owner can distribute\\\");\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            address user = stakers[i];\\n            if (isStaking[user]) {\\n                distributeRewards(user);\\n            }\\n        }\\n\\n        emit RewardsDistributed();\\n    }\\n\\n    /**\\n     * @notice Calcula y distribuye las recompensas proporcionalmente al staking total.\\n     */\\n    function distributeRewards(address beneficiary) private {\\n        uint256 lastCheckpoint = checkpoints[beneficiary];\\n        uint256 currentBlock = block.number;\\n\\n        if (currentBlock <= lastCheckpoint || totalStakingBalance == 0) {\\n            return;\\n        }\\n\\n        uint256 blocksPassed = currentBlock - lastCheckpoint;\\n        uint256 userBalance = stakingBalance[beneficiary];\\n\\n        if (userBalance == 0) {\\n            checkpoints[beneficiary] = currentBlock;\\n            return;\\n        }\\n\\n        // Calcular participaci\\u00f3n proporcional\\n        uint256 reward = (REWARD_PER_BLOCK * blocksPassed * userBalance) / totalStakingBalance;\\n\\n        pendingRewards[beneficiary] += reward;\\n        checkpoints[beneficiary] = currentBlock;\\n    }\\n}\\n\",\"keccak256\":\"0x0a979c81297538476c1cc52ebdec39444c9e7723b37539198f32986ba20ae560\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601760809081527f50726f706f7274696f6e616c20546f6b656e204661726d00000000000000000060a0526000906200003e908262000156565b503480156200004c57600080fd5b5060405162000e3338038062000e338339810160408190526200006f916200023b565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169181169190911790915560018054909116331790556200027a565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000dc57607f821691505b602082108103620000fd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200015157600081815260208120601f850160051c810160208610156200012c5750805b601f850160051c820191505b818110156200014d5782815560010162000138565b5050505b505050565b81516001600160401b03811115620001725762000172620000b1565b6200018a81620001838454620000c7565b8462000103565b602080601f831160018114620001c25760008415620001a95750858301515b600019600386901b1c1916600185901b1785556200014d565b600085815260208120601f198616915b82811015620001f357888601518255948401946001909101908401620001d2565b5085821015620002125787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03811681146200023857600080fd5b50565b600080604083850312156200024f57600080fd5b82516200025c8162000222565b60208401519092506200026f8162000222565b809150509250929050565b610ba9806200028a6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063db03e22711610066578063db03e2271461024c578063dbb51d6e14610254578063e766c83514610274578063fd5e6dd11461027d57600080fd5b80638da5cb5b146101f4578063975532dc14610207578063b6b55f2514610216578063c93c8f341461022957600080fd5b806345bc78ab116100d357806345bc78ab146101635780635eb186f8146101835780635fcbd285146101ae5780636f49712b146101c157600080fd5b806306fdde031461010557806331d7a26214610123578063372500ab146101515780633ccfd60b1461015b575b600080fd5b61010d610290565b60405161011a91906109d6565b60405180910390f35b610143610131366004610a24565b60086020526000908152604090205481565b60405190815260200161011a565b61015961031e565b005b610159610425565b610143610171366004610a24565b60066020526000908152604090205481565b600254610196906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b600354610196906001600160a01b031681565b6101e46101cf366004610a24565b600a6020526000908152604090205460ff1681565b604051901515815260200161011a565b600154610196906001600160a01b031681565b610143670de0b6b3a764000081565b610159610224366004610a54565b6105c0565b6101e4610237366004610a24565b60096020526000908152604090205460ff1681565b6101596107b4565b610143610262366004610a24565b60076020526000908152604090205481565b61014360045481565b61019661028b366004610a54565b6108a8565b6000805461029d90610a6d565b80601f01602080910402602001604051908101604052809291908181526020018280546102c990610a6d565b80156103165780601f106102eb57610100808354040283529160200191610316565b820191906000526020600020905b8154815290600101906020018083116102f957829003601f168201915b505050505081565b33600090815260086020526040902054806103755760405162461bcd60e51b81526020600482015260126024820152714e6f2070656e64696e67207265776172647360701b60448201526064015b60405180910390fd5b336000818152600860205260408082209190915560025490516340c10f1960e01b81526004810192909252602482018390526001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b50506040518381523392507ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe91506020015b60405180910390a250565b336000908152600a602052604090205460ff1661047a5760405162461bcd60e51b815260206004820152601360248201527255736572206973206e6f74207374616b696e6760681b604482015260640161036c565b33600090815260066020526040902054806104ce5760405162461bcd60e51b815260206004820152601460248201527305374616b696e672062616c616e636520697320360641b604482015260640161036c565b6104d7336108d2565b336000908152600660205260408120819055600480548392906104fb908490610abd565b9091555050336000818152600a602052604090819020805460ff19169055600354905163a9059cbb60e01b81526004810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610ad6565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200161041a565b600081116106105760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161036c565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190610ad6565b50610695336108d2565b33600090815260066020526040812080548392906106b4908490610af8565b9250508190555080600460008282546106cd9190610af8565b90915550503360009081526009602052604090205460ff16610744576005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b031916339081179091556000908152600960205260409020805460ff191690911790555b336000908152600a60209081526040808320805460ff1916600117905560079091528120549003610782573360009081526007602052604090204390555b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200161041a565b6001546001600160a01b0316331461080e5760405162461bcd60e51b815260206004820152601960248201527f4f6e6c79206f776e65722063616e206469737472696275746500000000000000604482015260640161036c565b60005b60055481101561087c5760006005828154811061083057610830610b0b565b60009182526020808320909101546001600160a01b0316808352600a90915260409091205490915060ff161561086957610869816108d2565b508061087481610b21565b915050610811565b506040517fefea7889cd26c56b4174d211c6b03e98a905c56c27fbd926d308e082727de59d90600090a1565b600581815481106108b857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600760205260409020544381811115806108fb5750600454155b1561090557505050565b60006109118383610abd565b6001600160a01b0385166000908152600660205260408120549192508190036109565750506001600160a01b0390921660009081526007602052604090209190915550565b6004546000908261096f85670de0b6b3a7640000610b3a565b6109799190610b3a565b6109839190610b51565b6001600160a01b0387166000908152600860205260408120805492935083929091906109b0908490610af8565b909155505050506001600160a01b03939093166000908152600760205260409020555050565b600060208083528351808285015260005b81811015610a03578581018301518582016040015282016109e7565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610a3657600080fd5b81356001600160a01b0381168114610a4d57600080fd5b9392505050565b600060208284031215610a6657600080fd5b5035919050565b600181811c90821680610a8157607f821691505b602082108103610aa157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ad057610ad0610aa7565b92915050565b600060208284031215610ae857600080fd5b81518015158114610a4d57600080fd5b80820180821115610ad057610ad0610aa7565b634e487b7160e01b600052603260045260246000fd5b600060018201610b3357610b33610aa7565b5060010190565b8082028115828204841417610ad057610ad0610aa7565b600082610b6e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122067503ea1649e5077c2949b4874488893f2ee3a6c0f6690778b8e0d92c05323cf64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063db03e22711610066578063db03e2271461024c578063dbb51d6e14610254578063e766c83514610274578063fd5e6dd11461027d57600080fd5b80638da5cb5b146101f4578063975532dc14610207578063b6b55f2514610216578063c93c8f341461022957600080fd5b806345bc78ab116100d357806345bc78ab146101635780635eb186f8146101835780635fcbd285146101ae5780636f49712b146101c157600080fd5b806306fdde031461010557806331d7a26214610123578063372500ab146101515780633ccfd60b1461015b575b600080fd5b61010d610290565b60405161011a91906109d6565b60405180910390f35b610143610131366004610a24565b60086020526000908152604090205481565b60405190815260200161011a565b61015961031e565b005b610159610425565b610143610171366004610a24565b60066020526000908152604090205481565b600254610196906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b600354610196906001600160a01b031681565b6101e46101cf366004610a24565b600a6020526000908152604090205460ff1681565b604051901515815260200161011a565b600154610196906001600160a01b031681565b610143670de0b6b3a764000081565b610159610224366004610a54565b6105c0565b6101e4610237366004610a24565b60096020526000908152604090205460ff1681565b6101596107b4565b610143610262366004610a24565b60076020526000908152604090205481565b61014360045481565b61019661028b366004610a54565b6108a8565b6000805461029d90610a6d565b80601f01602080910402602001604051908101604052809291908181526020018280546102c990610a6d565b80156103165780601f106102eb57610100808354040283529160200191610316565b820191906000526020600020905b8154815290600101906020018083116102f957829003601f168201915b505050505081565b33600090815260086020526040902054806103755760405162461bcd60e51b81526020600482015260126024820152714e6f2070656e64696e67207265776172647360701b60448201526064015b60405180910390fd5b336000818152600860205260408082209190915560025490516340c10f1960e01b81526004810192909252602482018390526001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b50506040518381523392507ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe91506020015b60405180910390a250565b336000908152600a602052604090205460ff1661047a5760405162461bcd60e51b815260206004820152601360248201527255736572206973206e6f74207374616b696e6760681b604482015260640161036c565b33600090815260066020526040902054806104ce5760405162461bcd60e51b815260206004820152601460248201527305374616b696e672062616c616e636520697320360641b604482015260640161036c565b6104d7336108d2565b336000908152600660205260408120819055600480548392906104fb908490610abd565b9091555050336000818152600a602052604090819020805460ff19169055600354905163a9059cbb60e01b81526004810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610ad6565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200161041a565b600081116106105760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161036c565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190610ad6565b50610695336108d2565b33600090815260066020526040812080548392906106b4908490610af8565b9250508190555080600460008282546106cd9190610af8565b90915550503360009081526009602052604090205460ff16610744576005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b031916339081179091556000908152600960205260409020805460ff191690911790555b336000908152600a60209081526040808320805460ff1916600117905560079091528120549003610782573360009081526007602052604090204390555b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200161041a565b6001546001600160a01b0316331461080e5760405162461bcd60e51b815260206004820152601960248201527f4f6e6c79206f776e65722063616e206469737472696275746500000000000000604482015260640161036c565b60005b60055481101561087c5760006005828154811061083057610830610b0b565b60009182526020808320909101546001600160a01b0316808352600a90915260409091205490915060ff161561086957610869816108d2565b508061087481610b21565b915050610811565b506040517fefea7889cd26c56b4174d211c6b03e98a905c56c27fbd926d308e082727de59d90600090a1565b600581815481106108b857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600760205260409020544381811115806108fb5750600454155b1561090557505050565b60006109118383610abd565b6001600160a01b0385166000908152600660205260408120549192508190036109565750506001600160a01b0390921660009081526007602052604090209190915550565b6004546000908261096f85670de0b6b3a7640000610b3a565b6109799190610b3a565b6109839190610b51565b6001600160a01b0387166000908152600860205260408120805492935083929091906109b0908490610af8565b909155505050506001600160a01b03939093166000908152600760205260409020555050565b600060208083528351808285015260005b81811015610a03578581018301518582016040015282016109e7565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610a3657600080fd5b81356001600160a01b0381168114610a4d57600080fd5b9392505050565b600060208284031215610a6657600080fd5b5035919050565b600181811c90821680610a8157607f821691505b602082108103610aa157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ad057610ad0610aa7565b92915050565b600060208284031215610ae857600080fd5b81518015158114610a4d57600080fd5b80820180821115610ad057610ad0610aa7565b634e487b7160e01b600052603260045260246000fd5b600060018201610b3357610b33610aa7565b5060010190565b8082028115828204841417610ad057610ad0610aa7565b600082610b6e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122067503ea1649e5077c2949b4874488893f2ee3a6c0f6690778b8e0d92c05323cf64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "params": {
          "_amount": "Cantidad de tokens LP a depositar."
        }
      }
    },
    "title": "Proportional Token Farm",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Reclama recompensas pendientes."
      },
      "deposit(uint256)": {
        "notice": "Deposita tokens LP para staking."
      },
      "distributeRewardsAll()": {
        "notice": "Distribuye recompensas a todos los usuarios en staking."
      },
      "withdraw()": {
        "notice": "Retira todos los tokens LP en staking."
      }
    },
    "notice": "Una granja de staking donde las recompensas se distribuyen proporcionalmente al total stakeado.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1019,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1021,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1024,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "dappToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(DappToken)972"
      },
      {
        "astId": 1027,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "lpToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LPToken)1011"
      },
      {
        "astId": 1032,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "totalStakingBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1035,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1039,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1043,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "checkpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1047,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "pendingRewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1051,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "hasStaked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1055,
        "contract": "contracts/TokenFarm.sol:TokenFarm",
        "label": "isStaking",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DappToken)972": {
        "encoding": "inplace",
        "label": "contract DappToken",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)1011": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}